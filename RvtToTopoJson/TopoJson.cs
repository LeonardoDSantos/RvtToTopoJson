// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace TopoJson
{

    public partial class Welcome
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("transform")]
        public Transform Transform { get; set; }

        [JsonProperty("objects")]
        public Objects Objects { get; set; }

        [JsonProperty("arcs")]
        public List<List<List<double>>> Arcs { get; set; }
    }

    public partial class Objects
    {
        [JsonProperty("example")]
        public Example Example { get; set; }
    }

    public partial class Example
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("geometries")]
        public List<Geometry> Geometries { get; set; }
    }

    public partial class Geometry
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public Properties Properties { get; set; }

        [JsonProperty("arcs")]
        public List<List<int>> Arcs { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("Number")]
        public string Number { get; set; }

        [JsonProperty("Room Name")]
        public string RoomName { get; set; }

        [JsonProperty("Area")]
        public double Area { get; set; }
    }

    public partial class Transform
    {
        [JsonProperty("scale")]
        public long[] Scale { get; set; }

        [JsonProperty("translate")]
        public long[] Translate { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Formatting = Formatting.Indented,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
